{"version":3,"sources":["gallery/GalleryItem.jsx","assets/loading.gif","gallery/LoadingComponent.jsx","gallery/NoItemsComponent.jsx","hooks/useNasaImages.js","gallery/Gallery.jsx","Stars.jsx","App.jsx","index.jsx"],"names":["ItemContent","styled","CardContent","ItemHeader","CardHeader","HeartIcon","FavoriteIcon","props","liked","GalleryItem","item","onItemLiked","Card","CardMedia","component","image","url","title","subheader","date","Typography","align","explanation","color","copyright","CardActions","IconButton","aria-label","onClick","meta","ellipsis","keyframes","LoadingText","LoadingImage","img","Loading","variant","src","loading","alt","NoItems","padding","queryNasa","a","retries","req","Request","process","fetch","then","res","ok","json","Error","status","data","catch","err","console","error","useNasaImages","useState","items","setItems","isLoaded","setIsLoaded","useEffect","queriedItems","taggedItems","map","id","uuid","query","itemId","updatedItems","GalleryContent","div","GalleryHeader","Gallery","galleryContent","useMemo","length","Grid","container","spacing","sm","Stars","size","Array","from","num","x","Math","floor","random","y","generateStar","join","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb679c63.chunk.js","sourcesContent":["import T from 'prop-types';\nimport styled from '@emotion/styled';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardMedia from '@mui/material/CardMedia';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\nconst ItemContent = styled(CardContent)`\n  padding: 24px;\n`;\n\nconst ItemHeader = styled(CardHeader)`\n  & .MuiCardHeader-title {\n    font-weight: bold;\n  }\n`;\n\nconst HeartIcon = styled(FavoriteIcon)`\n  color: ${(props) => (props.liked ? '#ED4956' : '')}\n`;\n\nconst GalleryItem = ({ item, onItemLiked }) => (\n  <Card>\n    <CardMedia component=\"img\" image={item.url} />\n    <ItemHeader title={item.title} subheader={`Date: ${item.date}`} />\n    <ItemContent>\n      <Typography align=\"left\">{item.explanation}</Typography>\n      <br />\n      <Typography align=\"right\" color=\"text.primary\">{`© ${item.copyright}`}</Typography>\n    </ItemContent>\n    <CardActions>\n      <IconButton aria-label=\"like the photo\" onClick={onItemLiked}>\n        <HeartIcon liked={!!item.meta.liked} />\n      </IconButton>\n    </CardActions>\n  </Card>\n);\n\nGalleryItem.propTypes = {\n  item: T.shape({\n    title: T.string.isRequired,\n    date: T.string.isRequired,\n    url: T.string.isRequired,\n    explanation: T.string.isRequired,\n    copyright: T.string.isRequired,\n    meta: T.shape({\n      liked: T.bool,\n    }),\n  }).isRequired,\n  onItemLiked: T.func.isRequired,\n};\n\nexport default GalleryItem;\n","export default __webpack_public_path__ + \"static/media/loading.7feeb284.gif\";","import styled from '@emotion/styled';\nimport { keyframes } from '@emotion/react';\nimport Typography from '@mui/material/Typography';\nimport loading from '../assets/loading.gif';\n\nconst ellipsis = keyframes`\n  from {\n    width: 0px;\n  }\n  to {\n    width: 35px;    \n  }\n`;\n\nconst LoadingText = styled(Typography)`\n  &:after {\n    content: \"…\";\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    animation : ${ellipsis} steps(4, end) 4s infinite;\n  }\n`;\n\nconst LoadingImage = styled.img`\n  padding: 20px;\n  height: 50vmin;\n  width: 50vmin;\n`;\n\nconst Loading = () => (\n  <>\n    <LoadingText variant=\"h5\">Loading images</LoadingText>\n    <LoadingImage src={loading} alt=\"loading spinner\" />\n  </>\n);\n\nexport default Loading;\n","import Typography from '@mui/material/Typography';\n\nconst NoItems = () => (\n  <>\n    <Typography variant=\"h1\">:(</Typography>\n    <Typography padding=\"2rem\">This is ground control to Major Tom.</Typography>\n    <Typography>We couldn&apos;t get any images from NASA. Please come back later.</Typography>\n  </>\n);\n\nexport default NoItems;\n","import { useState, useEffect } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nconst MAX_RETRIES = 3;\n\n/**\n * Queries items from NASA's Astronomy Picture of the Day API.\n * @returns list of items that were queried.\n */\nconst queryNasa = async (retries = MAX_RETRIES) => {\n  const req = new Request(\n    `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_KEY}&count=10`,\n    {},\n  );\n  return fetch(req)\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw new Error(`Error: ${res.status}`);\n    })\n    .then((data) => data)\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.error(`Failed to fetch from NASA API. Retries remaining: ${retries}`, err);\n      if (retries > 1) {\n        return queryNasa(retries - 1);\n      }\n      return [];\n    });\n};\n\nconst useNasaImages = () => {\n  const [items, setItems] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // try to query data from nasa\n  useEffect(() => {\n    const query = async () => {\n      const queriedItems = await queryNasa();\n      // const queriedItems = [];\n\n      const taggedItems = queriedItems.map((item) => ({\n        ...item,\n        id: uuid(),\n        meta: {\n          ...(item.meta ?? {}),\n        },\n      }));\n      setItems(taggedItems);\n      setIsLoaded(true);\n    };\n\n    query();\n  }, []);\n\n  /**\n   * Toggles the \"liked\" status of gallery items when an item is liked/unliked.\n   *\n   * @param {string} itemId id of the item the user has liked/unliked.\n   */\n  const handleItemLiked = (itemId) => {\n    const updatedItems = items.map((item) => {\n      if (item.id !== itemId) {\n        return item;\n      }\n      return {\n        ...item,\n        meta: {\n          ...item.meta,\n          liked: !item.meta.liked,\n        },\n      };\n    });\n    setItems(updatedItems);\n  };\n\n  return [items, isLoaded, handleItemLiked];\n};\n\nexport default useNasaImages;\n","import { useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport GalleryItem from './GalleryItem';\nimport Loading from './LoadingComponent';\nimport NoItems from './NoItemsComponent';\nimport useNasaImages from '../hooks/useNasaImages';\n\nconst GalleryContent = styled.div`\n  position: relative;\n  width: 50vw;\n`;\n\nconst GalleryHeader = styled.div`\n  padding: 40px;\n`;\n\nconst Gallery = () => {\n  const [items, onItemLiked, isLoaded] = useNasaImages();\n\n  const galleryContent = useMemo(() => {\n    if (!isLoaded) {\n      return <Loading />;\n    }\n    if (items.length === 0) {\n      return <NoItems />;\n    }\n    return (\n      <Grid container spacing={6}>\n        {items.map((item) => (\n          <Grid key={item.id} item sm={12}>\n            <GalleryItem item={item} onItemLiked={onItemLiked} />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }, [items, onItemLiked, isLoaded]);\n\n  return (\n    <>\n      <GalleryHeader>\n        <Typography variant=\"h1\">\n          Spacetagram!\n        </Typography>\n        <Typography>\n          Powered by NASA&apos;s Astronomy Photo of the Day API\n        </Typography>\n      </GalleryHeader>\n      <GalleryContent>\n        {galleryContent}\n      </GalleryContent>\n    </>\n  );\n};\n\nexport default Gallery;\n","import styled from '@emotion/styled';\n\nconst DEFAULT_NUM_STARS = 200;\nconst DEFAULT_STAR_SIZE = 1;\n\nconst generateStar = () => {\n  const x = Math.floor(Math.random() * 1080);\n  const y = Math.floor(Math.random() * 1920);\n  return `${x}px ${y}px #FFF`;\n};\n\nconst Stars = styled.div`\n  width: ${(props) => props.size ?? DEFAULT_STAR_SIZE}px;\n  height: ${(props) => props.size ?? DEFAULT_STAR_SIZE}px;\n  box-shadow: ${(props) => Array.from(Array(props.num ?? DEFAULT_NUM_STARS), () => generateStar()).join(',')};\n`;\n\nexport default Stars;\n","import './App.css';\nimport Gallery from './gallery/Gallery';\nimport Stars from './Stars';\n\nconst App = () => (\n  <div className=\"App\">\n    <Stars className=\"App-stars\" size={1} num={512} />\n    <Stars className=\"App-stars\" size={3} num={256} />\n    <div className=\"App-content\">\n      <Gallery />\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}