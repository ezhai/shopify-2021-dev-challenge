{"version":3,"sources":["gallery/GalleryItem.jsx","assets/loading.gif","gallery/LoadingComponent.jsx","gallery/NoItemsComponent.jsx","hooks/useNasaImages.js","gallery/Gallery.jsx","Stars.jsx","App.jsx","index.jsx"],"names":["ItemContent","styled","CardContent","ItemHeader","CardHeader","ItemActions","CardActions","HeartIconFilled","FavoriteIconFilled","shouldForwardProp","props","liked","HeartIconOutlined","FavoriteIconOutlined","GalleryItem","item","onItemLiked","handleLike","useCallback","id","mediaType","media_type","HeartIcon","meta","userLiked","Card","CardMedia","component","src","url","IconButton","aria-label","onClick","fontSize","Typography","likes","title","subheader","date","align","explanation","color","copyright","ellipsis","keyframes","LoadingContainer","div","LoadingText","LoadingImage","img","Loading","variant","loading","alt","NoItems","padding","queryNasa","startDate","endDate","a","retries","req","Request","process","fetch","then","res","ok","json","Error","status","data","map","uuid","catch","err","console","error","toNasaDate","toISOString","split","useNasaImages","useState","images","setImages","isLoading","setIsLoading","useRef","Date","loadImages","current","setDate","getDate","startDateString","endDateString","queriedImages","allImages","sort","b","localeCompare","useEffect","handleScroll","window","innerHeight","document","documentElement","scrollTop","scrollingElement","scrollHeight","addEventListener","removeEventListener","itemId","updatedItems","GalleryContent","GalleryHeader","Gallery","items","galleryContent","useMemo","length","Grid","container","spacing","sm","Stars","size","Array","from","num","x","Math","floor","random","y","generateStar","join","App","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90b603b8.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport T from 'prop-types';\nimport styled from '@emotion/styled';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardMedia from '@mui/material/CardMedia';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport FavoriteIconFilled from '@mui/icons-material/Favorite';\nimport FavoriteIconOutlined from '@mui/icons-material/FavoriteBorderOutlined';\n\nconst ItemContent = styled(CardContent)`\n  padding: 1rem 1.5rem;\n`;\n\nconst ItemHeader = styled(CardHeader)`\n  & .MuiCardHeader-title {\n    font-weight: bold;\n  }\n`;\n\nconst ItemActions = styled(CardActions)`\n  padding: 1rem;\n`;\n\nconst HeartIconFilled = styled(FavoriteIconFilled, {\n  shouldForwardProp: () => false,\n})`\n  color: ${(props) => (props.liked ? '#ED4956' : '')}\n`;\n\nconst HeartIconOutlined = styled(FavoriteIconOutlined, {\n  shouldForwardProp: () => false,\n})`\n  color: ${(props) => (props.liked ? '#ED4956' : '')}\n`;\n\nconst GalleryItem = ({ item, onItemLiked }) => {\n  const handleLike = useCallback(() => {\n    onItemLiked(item.id);\n  }, [item, onItemLiked]);\n\n  const mediaType = item.media_type === 'video' ? 'iframe' : 'img';\n  const HeartIcon = item.meta.userLiked ? HeartIconFilled : HeartIconOutlined;\n\n  return (\n    <Card>\n      <CardMedia component={mediaType} src={item.url} />\n      <ItemActions>\n        <IconButton aria-label=\"like the post\" onClick={handleLike}>\n          <HeartIcon fontSize=\"large\" liked={!!item.meta.userLiked} />\n        </IconButton>\n        <Typography>{`${item.meta.likes} like${item.meta.likes === 1 ? '' : 's'}`}</Typography>\n      </ItemActions>\n      <ItemHeader title={item.title} subheader={`Date: ${item.date}`} />\n      <ItemContent>\n        <Typography align=\"left\">{item.explanation}</Typography>\n        <br />\n        <Typography align=\"left\" color=\"text.primary\">{`© ${item.copyright || 'unknown'}`}</Typography>\n      </ItemContent>\n    </Card>\n  );\n};\n\nGalleryItem.propTypes = {\n  item: T.shape({\n    id: T.string.isRequired,\n    title: T.string.isRequired,\n    media_type: T.string.isRequired,\n    date: T.string.isRequired,\n    url: T.string.isRequired,\n    explanation: T.string.isRequired,\n    copyright: T.string,\n    meta: T.shape({\n      likes: T.number.isRequired,\n      userLiked: T.bool.isRequired,\n    }),\n  }).isRequired,\n  onItemLiked: T.func.isRequired,\n};\n\nexport default GalleryItem;\n","export default __webpack_public_path__ + \"static/media/loading.7feeb284.gif\";","import styled from '@emotion/styled';\nimport { keyframes } from '@emotion/react';\nimport Typography from '@mui/material/Typography';\nimport loading from '../assets/loading.gif';\n\nconst ellipsis = keyframes`\n  from {\n    width: 0px;\n  }\n  to {\n    width: 3rem;    \n  }\n`;\n\nconst LoadingContainer = styled.div`\n  padding: 4rem;\n`;\n\nconst LoadingText = styled(Typography)`\n  &:after {\n    content: \"…\";\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    animation : ${ellipsis} steps(4, end) 4s infinite;\n  }\n`;\n\nconst LoadingImage = styled.img`\n  padding: 20px;\n  height: 50vmin;\n  width: 50vmin;\n`;\n\nconst Loading = () => (\n  <LoadingContainer>\n    <LoadingText variant=\"h4\">Loading images</LoadingText>\n    <LoadingImage src={loading} alt=\"loading spinner\" />\n  </LoadingContainer>\n);\n\nexport default Loading;\n","import Typography from '@mui/material/Typography';\n\nconst NoItems = () => (\n  <>\n    <Typography variant=\"h1\">:(</Typography>\n    <Typography padding=\"2rem\">This is ground control to Major Tom.</Typography>\n    <Typography>We couldn&apos;t get any images from NASA. Please come back later.</Typography>\n  </>\n);\n\nexport default NoItems;\n","import {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n} from 'react';\nimport { v4 as uuid } from 'uuid';\n\nconst MAX_RETRIES = 3;\nconst IMAGE_SET_SIZE = 16;\n\n/**\n * Queries items from NASA's Astronomy Picture of the Day API.\n * @returns list of items that were queried.\n */\nconst queryNasa = async (startDate, endDate, retries = MAX_RETRIES) => {\n  const req = new Request(\n    `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_KEY}&start_date=${startDate}&end_date=${endDate}`,\n    {},\n  );\n\n  return fetch(req)\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw new Error(`Error: ${res.status}`);\n    })\n    .then((data) => data.map((item) => ({\n      ...item,\n      id: uuid(),\n      meta: {\n        likes: 0,\n        userLiked: false,\n      },\n    })))\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.error(`Failed to fetch from NASA API. Retries remaining: ${retries}`, err);\n      if (retries > 1) {\n        return queryNasa(startDate, endDate, retries - 1);\n      }\n      return [];\n    });\n};\n\n/**\n * Converts a Date object to YYYY-MM-DD.\n * @param {Date} date date to covert\n *\n * @returns a string representing a date in YYYY-MM-DD format.\n */\nconst toNasaDate = (date) => date.toISOString().split('T')[0];\n\nconst useNasaImages = () => {\n  const [images, setImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const endDate = useRef(new Date());\n\n  /**\n   * Load the next set of images.\n   */\n  const loadImages = useCallback(async () => {\n    if (isLoading) {\n      return;\n    }\n    setIsLoading(true);\n\n    // set the dates to load the next set of images\n    const startDate = new Date(endDate.current);\n    startDate.setDate(startDate.getDate() - IMAGE_SET_SIZE);\n\n    // fetch the images from NASA\n    const startDateString = toNasaDate(startDate);\n    const endDateString = toNasaDate(endDate.current);\n\n    const queriedImages = await queryNasa(startDateString, endDateString);\n    const allImages = [...images, ...queriedImages].sort((a, b) => b.date.localeCompare(a.date));\n\n    // set the endDate to be the first image in the next wet\n    endDate.current = startDate;\n    endDate.current.setDate(endDate.current.getDate() - 1);\n\n    setImages(allImages);\n    setIsLoading(false);\n  }, [images, isLoading]);\n\n  /**\n   * Query the first set of images on mount.\n   */\n  useEffect(() => {\n    loadImages();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Add listeners to load more images when the user scrolls to the bottom of the page.\n   */\n  useEffect(() => {\n    const handleScroll = () => {\n      // eslint-disable-next-line max-len\n      if (window.innerHeight + document.documentElement.scrollTop + 10 >= document.scrollingElement.scrollHeight) {\n        loadImages();\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [loadImages]);\n\n  /**\n   * Toggles the \"liked\" status of gallery items when an item is liked/unliked.\n   *\n   * @param {string} itemId id of the item the user has liked/unliked.\n   */\n  const handleImageLiked = (itemId) => {\n    const updatedItems = images.map((item) => {\n      if (item.id !== itemId) {\n        return item;\n      }\n      return {\n        ...item,\n        meta: {\n          ...item.meta,\n          likes: item.meta.userLiked ? item.meta.likes - 1 : item.meta.likes + 1,\n          userLiked: !item.meta.userLiked,\n        },\n      };\n    });\n    setImages(updatedItems);\n  };\n\n  return [images, handleImageLiked, isLoading];\n};\n\nexport default useNasaImages;\n","import { useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport GalleryItem from './GalleryItem';\nimport Loading from './LoadingComponent';\nimport NoItems from './NoItemsComponent';\nimport useNasaImages from '../hooks/useNasaImages';\n\nconst GalleryContent = styled.div`\n  overflow: hidden;\n  width: 60vw;\n\n  @media screen and (max-width: 600px) {\n    width: 85vw;\n  }\n`;\n\nconst GalleryHeader = styled.div`\n  margin: 10vh 10vw 5vh 10vw;\n`;\n\nconst Gallery = () => {\n  const [items, onItemLiked, isLoading] = useNasaImages();\n\n  const galleryContent = useMemo(() => {\n    if (!isLoading && items.length === 0) {\n      return <NoItems />;\n    }\n    return (\n      <>\n        <GalleryContent>\n          <Grid container spacing={6}>\n            {items.map((item) => (\n              <Grid key={item.id} item sm={12}>\n                <GalleryItem item={item} onItemLiked={onItemLiked} />\n              </Grid>\n            ))}\n          </Grid>\n        </GalleryContent>\n        {isLoading && <Loading />}\n      </>\n    );\n  }, [items, onItemLiked, isLoading]);\n\n  return (\n    <>\n      <GalleryHeader>\n        <Typography variant=\"h3\">\n          Spacetagram\n        </Typography>\n        <Typography>\n          Powered by NASA&apos;s Astronomy Photo of the Day API\n        </Typography>\n      </GalleryHeader>\n      {galleryContent}\n    </>\n  );\n};\n\nexport default Gallery;\n","import styled from '@emotion/styled';\n\nconst DEFAULT_NUM_STARS = 200;\nconst DEFAULT_STAR_SIZE = 1;\n\nconst generateStar = () => {\n  const x = Math.floor(Math.random() * 100);\n  const y = Math.floor(Math.random() * 200);\n  return `${x}vw ${y}vh #FFF`;\n};\n\nconst Stars = styled.div`\n  width: ${(props) => props.size ?? DEFAULT_STAR_SIZE}px;\n  height: ${(props) => props.size ?? DEFAULT_STAR_SIZE}px;\n  box-shadow: ${(props) => Array.from(Array(props.num ?? DEFAULT_NUM_STARS), () => generateStar()).join(',')};\n`;\n\nexport default Stars;\n","import './App.css';\nimport Gallery from './gallery/Gallery';\nimport Stars from './Stars';\n\nconst App = () => (\n  <div className=\"App\">\n    <Stars className=\"App-stars\" size={1} num={512} />\n    <Stars className=\"App-stars\" size={3} num={128} />\n    <div className=\"App-content\">\n      <Gallery />\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}